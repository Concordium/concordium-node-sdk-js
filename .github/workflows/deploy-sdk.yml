name: Deploy SDK

on:
  # Run automatically on tag push
  push:
    tags:
      - sdk/*
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'deploy-sdk'
  cancel-in-progress: false

env:
  NODE_VERSION: 18.16.0
  RUST_VERSION: 1.73

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install rust
        run: rustup default ${{ env.RUST_VERSION }}

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            packages/rust-bindings
            deps/concordium-base/rust-src
            deps/concordium-base/smart-contracts/contracts-common

      - name: Cache dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./docs/node_modules
            ./packages/*/node_modules
            ./examples/**/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Cache GRPC
        id: cache-grpc
        uses: actions/cache@v4
        with:
          path: |
            ./packages/sdk/src/grpc-api
          key: ${{ runner.os }}-grpc-${{ hashFiles('deps/concordium-base/concordium-grpc-api') }}
          restore-keys: ${{ runner.os }}-grpc

      - name: Get dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Build release
        run: yarn build:all

      - name: Generate typedoc documentation
        run: yarn build:docs

      - name: Store build-release
        uses: actions/upload-artifact@v4
        with:
          name: build-release
          path: |
            packages/sdk/lib
            packages/sdk/src
            packages/sdk/package.json
            packages/sdk/README.md

      - name: Store typedoc
        uses: actions/upload-artifact@v4
        with:
          name: typedoc-build
          path: typedoc

  upload-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: deploy
    outputs:
      npm_tag: ${{ steps.determine_npm_tag.outputs.npm_tag }}
      version: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Extract tag name
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/sdk/}" >> $GITHUB_OUTPUT

      - name: Test that tag version matches package.json version
        run: test "${{ steps.get_tag.outputs.tag }}" = "$(jq -r ".version" packages/sdk/package.json)" || exit 1

      - name: Determine npm tag
        id: determine_npm_tag
        run: |
          version=$(jq -r ".version" packages/sdk/package.json)
          if [[ "$version" == *-* ]]; then
            npm_tag=$(echo "$version" | cut -d'-' -f2 | cut -d'.' -f1)
          else
            npm_tag="latest"
          fi
          echo "npm_tag=$npm_tag" >> $GITHUB_OUTPUT

      - name: Get build-output
        uses: actions/download-artifact@v5
        with:
          name: build-release
          path: packages/sdk

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to NPM
        run: |
          yarn config set npmAuthToken $NPM_AUTH_TOKEN
          yarn workspace @concordium/web-sdk npm publish --tag ${{ steps.determine_npm_tag.outputs.npm_tag }}
        env:
          NPM_AUTH_TOKEN: '${{secrets.NPM_PUBLISH_TOKEN}}'

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: sdk/${{ steps.get_tag.outputs.tag }}
          name: SDK Release v${{ steps.get_tag.outputs.tag }}
          draft: true

  deploy-typedoc:
    needs:
      - upload-release
    environment:
      name: github-pages
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get typedoc
        uses: actions/download-artifact@v5
        with:
          path: typedoc
          name: typedoc-build

      # Clone old `gh-pages` branch so we can later build a list of
      # available documentation versions.
      - name: Clone old gh-pages content
        run: |
          # Make a local work folder
          mkdir -p gh-pages

          # Copy its content into local `gh-pages` folder
          git clone --branch gh-pages --depth 1 https://github.com/Concordium/concordium-node-sdk-js old-gh-pages
          cp -r old-gh-pages/* gh-pages/

      # Put new docs into a versioned subfolder
      - name: Generate versioned subfolder
        run: |
          VERSION=${{ needs.upload-release.outputs.version }}
          mkdir -p gh-pages/$VERSION
          cp -r typedoc/* gh-pages/$VERSION

      # Update the "latest" subfolder content with the newest doc version.
      - name: Update `latest` subfolder content
        if: needs.upload-release.outputs.npm_tag == 'latest'
        run: |
          mkdir -p gh-pages/latest
          rm -rf gh-pages/latest/*
          cp -r typedoc/* gh-pages/latest

      # Generate list of available documentation versions.
      # This needs to be done after the `gh-pages` branch has been fetched with the old docs.
      - name: Generate docs index
        run: |
          echo "<!DOCTYPE html>" > gh-pages/index.html
          echo "<html lang=\"en\"><head><meta charset=\"utf-8\"><title>Documentation Versions</title></head><body>" >> gh-pages/index.html
          echo "<h1>Available Documentation Versions</h1><ul>" >> gh-pages/index.html

          # Loop over all directories in gh-pages/
          for d in gh-pages/*/ ; do
            version=$(basename "$d")
            echo "<li><a href=\"./$version/\">$version</a></li>" >> gh-pages/index.html
          done

          echo "</ul>" >> gh-pages/index.html
          echo "</body></html>" >> gh-pages/index.html

      # Setup based on: 
      #  - https://github.com/orgs/community/discussions/25305#discussioncomment-8256560
      #  - https://github.com/actions/create-github-app-token?tab=readme-ov-file#use-app-token-with-actionscheckout
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.DEPLOYER_APPID }}
          private-key: ${{ secrets.DEPLOYER_PRIVATE_KEY }}

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          publish_dir: ./gh-pages
          keep_files: true
